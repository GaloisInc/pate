#!/usr/bin/env -S expect -f
#
# This is an expect script modeling the user interaction of PATE on the packet example.
#
# Beyond testing basic verifier functionality, this test is also intended to
# provide an integration test of the 1) terminal user interaction, and 2)
# resulting equivalence condition, in ways that the other automated tests do not.
# The test for the "expected" equivalence condition is syntactic, so this test will
# likely be more brittle (e.g. break if the term simplification changes such that
# intermediate variable numbers change) and may need to be updated to reflect
# intended subsequent changes to PATE verification details.
#
# This test is intended to be run from the root of the pate directory:
#    ./tests/integration/packet/packet.exp
#
# Note that expected strings must be escaped: double-quotes (\") and brackets (\\\[)
#
# Also note this example is mentioned in the README.rst and used in the User Manual.
# Major changes here likely warrant an update of the corresponding User Manual content.

spawn ./pate.sh --original tests/integration/packet/packet.original.exe --patched tests/integration/packet/packet.patched.exe -s parse_packet --add-trace-constraints

set timeout 480

expect_before {
        timeout { send_user "\n\nFAILURE: timeout\n"; exit 1 }
        eof     { send_user "\n\nFAILURE: eof\n";     exit 2 }
}

expect "Choose Entry Point"
expect "1: Function Entry \"parse_packet\" (segment1+0x590)"
expect "?>"
send "1\r"
send "top\r"
send "wait\r"

expect "Handle observable difference:"
expect "4: Avoid difference with equivalence condition"
expect "?>"
send "4\r"

expect "Continue verification?"
expect "0: Finish and view final result"
expect "?>"
send "0\r"

expect "Regenerate result with new trace constraints?"
expect "0: True"
send "0\r"
expect "Waiting for constraints.."

# The identifier here is not stable. Ideally we could fetch it somehow, but if this fails there will be an 
# error about a missing identifier. The target expression should be the one that ends in 
# something like: 'select v35113 (bvSum cr5O_offset@34733:bv 0x2:[32]))'

send "input \"\[ \[ { \\\"var\\\" : { \\\"symbolic_ident\\\" : 17460 }, \\\"op\\\" : \\\"EQ\\\", \\\"const\\\" : \\\"128\\\"} \] \]\"\r"

expect "Regenerate result with new trace constraints?"
expect "1: False"
send "1\r"


expect "20: Final Result"
expect ">"
send "20\r"

expect "0: Assumed Equivalence Conditions"
expect "2: Binaries are conditionally, observably equivalent"
expect ">"
send "0\r"

# Inspect the specific equivalence condition

expect "0: segment1+0x71c \\\[ via: \"parse_packet\" (segment1+0x590) \\\]"
expect ">"
send "0\r"

expect -re {3: \(Predicate\) let -- segment1\+0x754.. in not \(and v(\d)+ \(not v(\d)+\)\)}
expect ">"
send "3\r"

expect -re {v((\d)+) = eq 0x80:\[8\] \(.*\)}
expect -re {in not \(and v(\d)+ \(not v(\d)+\)\)}
expect ">"

send "up\r"
expect ">"
send "up\r"
expect ">"
send "up\r"
expect "5: Assumed Equivalence Conditions"
expect ">"
send "5\r"

expect "0: segment1+0x71c \\\[ via: \"parse_packet\" (segment1+0x590) \\\]"
expect ">"
send "0\r"

expect "5: Simplified Predicate"
send "5\r"

expect "0: eq 0x0:\\\[8\\\] (select (select cInitMemBytes@49845:a 0) 0x11044:\\\[32\\\])"

send "\x04" ; # Ctrl-D (EOF)

# remove EOF from expect_before, now that we're expecting it
expect_before {
        timeout { send_user "\n\nFAILURE: timeout\n"; exit 1 }
}
expect eof

send_user "\nSUCCESS: packet integration test complete\n"
